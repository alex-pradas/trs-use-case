#!/usr/bin/env python3
"""
Live demonstration of AI agent processing real aerospace load data.
"""

import asyncio
import os
from pathlib import Path
from dotenv import load_dotenv

# Add tools directory to path
import sys

tools_dir = Path(__file__).parent / "tools"
sys.path.insert(0, str(tools_dir))

from tools.mcps.python_exec_mcp_server import create_mcp_server
from tests.test_python_exec_agent_integration import PythonExecutionMCPTestAgent

# Load environment variables
load_dotenv()


async def main():
    """Demonstrate the AI agent processing aerospace loads."""

    if not os.getenv("ANTHROPIC_API_KEY"):
        print("‚ùå ANTHROPIC_API_KEY not available - cannot run agent demo")
        return

    print("üöÄ AI Agent Aerospace Load Processing Demo")
    print("=" * 50)

    # Create MCP server and agent
    server = create_mcp_server()
    agent = PythonExecutionMCPTestAgent(server, disable_security=True)

    # Define the challenge
    challenge = """
    Please process real aerospace load data step by step:
    
    1. Load LoadSet from 'solution/loads/new_loads.json' using LoadSet.read_json()
    2. Show summary info (name, units, number of load cases)
    3. Convert units to kN using convert_to('kN')
    4. Scale loads by 1.5 using factor(1.5)
    5. Show first load case data before and after processing
    6. Load old data from 'solution/loads/old_loads.json'
    7. Compare the original new vs old data using compare_to()
    8. Show key differences found
    
    Execute each step with code and show results.
    """

    print("ü§ñ Sending challenge to AI agent...")
    print("Challenge:")
    print(challenge)
    print("\nüîÑ Agent is processing... (this may take 30-60 seconds)")

    # Run the challenge
    result = await agent.solve_programming_challenge(challenge)

    print("\n" + "=" * 50)
    print("üìä RESULTS")
    print("=" * 50)

    if result["success"]:
        print("‚úÖ Agent completed successfully!")
        print("\nü§ñ Agent Response:")
        print(result["agent_response"])
    else:
        print("‚ùå Agent encountered an error:")
        print(result.get("error", "Unknown error"))

    # Show execution history
    print("\n" + "=" * 50)
    print("üîç EXECUTION ANALYSIS")
    print("=" * 50)

    history = agent.call_tool_directly("get_execution_history", limit=10)
    if history["success"]:
        executions = history["tool_result"]["history"]
        print(f"üìä Total executions: {len(executions)}")
        print(f"‚úÖ Successful: {sum(1 for e in executions if e['success'])}")
        print(f"‚ùå Failed: {sum(1 for e in executions if not e['success'])}")

        print("\nü§ñ Code Generated by Agent:")
        for i, entry in enumerate(executions, 1):
            status = "‚úÖ" if entry["success"] else "‚ùå"
            print(f"\n{status} Execution {i}:")
            print("```python")
            print(entry["code"])
            print("```")

            if entry["stdout"] and entry["success"]:
                print("Output:")
                print(
                    entry["stdout"][:500]
                    + ("..." if len(entry["stdout"]) > 500 else "")
                )

            if entry["error"]:
                print(f"Error: {entry['error']}")

    # Check variables created
    variables = agent.call_tool_directly("list_variables")
    if variables["success"]:
        var_names = list(variables["tool_result"]["variables"].keys())
        loadset_vars = [
            v
            for v in var_names
            if "load" in v.lower()
            and "LoadSet" in variables["tool_result"]["variables"][v]["type"]
        ]

        if loadset_vars:
            print(f"\nüöÄ LoadSet variables created: {loadset_vars}")

            # Get details on the first LoadSet
            for var in loadset_vars[:1]:  # Just show first one
                var_detail = agent.call_tool_directly("get_variable", name=var)
                if var_detail["success"]:
                    print(f"\nüìä {var} details:")
                    print(
                        f"  Type: {var_detail['tool_result']['variable_info']['type']}"
                    )
                    if "shape" in var_detail["tool_result"]["variable_info"]:
                        print(
                            f"  Shape: {var_detail['tool_result']['variable_info']['shape']}"
                        )

    # Analyze workflow completion
    all_code = " ".join([e["code"] for e in executions]).lower()
    workflow_checks = [
        ("loadset.read_json", "‚úàÔ∏è Load aerospace data"),
        ("convert_to", "üîÑ Unit conversion"),
        ("factor", "üìä Load scaling"),
        ("compare_to", "üîç Data comparison"),
    ]

    print(f"\nüéØ Workflow Verification:")
    completed = 0
    for check, description in workflow_checks:
        found = check in all_code
        status = "‚úÖ" if found else "‚ùå"
        if found:
            completed += 1
        print(f"  {status} {description}")

    print(
        f"\nüìà Final Score: {completed}/{len(workflow_checks)} workflow steps completed"
    )

    if completed >= 3:
        print(
            "\nüéâ SUCCESS: AI Agent demonstrated autonomous aerospace load processing!"
        )
        print("   Key achievements:")
        print("   - Generated Python code from natural language requirements")
        print("   - Worked with real aerospace structural load data")
        print("   - Performed engineering calculations (unit conversion, scaling)")
        print("   - Used project-specific LoadSet classes and methods")
        print("   - Maintained persistent state across multiple code executions")
        print("   - Demonstrated iterative problem-solving approach")
    else:
        print(
            f"\n‚ö†Ô∏è Partial success: Agent completed {completed} of {len(workflow_checks)} workflow steps"
        )


if __name__ == "__main__":
    asyncio.run(main())
