[project]
name = "trs-use-case"
version = "0.1.0"
requires-python = ">=3.13"
dependencies = [
    "pydantic-ai>=0.4.8",
    "fastmcp>=2.10.6",
    "python-dotenv>=1.1.1",
    "logfire>=4.0.0",
    "matplotlib>=3.8.0",
    "numpy>=2.3.2",
    "ipython>=9.4.0",
    "pydantic-evals>=0.4.8",
]

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests", "tests/tools", "tests/mcps", "tests/agents"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"  # Automatically detect async tests
asyncio_default_fixture_loop_scope = "module"  # async fixtures are valid per function (faster)
asyncio_default_test_loop_scope = "function"  # each test gets its own loop

# Output configuration
addopts = [
    "-v",                    # Verbose output
    "--tb=short",           # Shorter traceback format
    "--strict-markers",     # Strict marker usage
    "--strict-config",      # Strict config file usage
    "--color=yes",          # Colored output
    "--cov-report=xml:cov.xml",  # XML coverage report
    "-m", "not visuals and not expensive",    # Skip visual and expensive tests by default
]

# Markers for test categorization
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "visuals: Visual chart generation tests (run with: pytest -m visuals)",
    "expensive: Expensive tests that call actual LLM APIs (run with: pytest -m expensive)",
]

# Minimum version
minversion = "6.0"

# Test session configuration
console_output_style = "progress"
junit_family = "xunit2"

[tool.coverage.run]
omit = [
    "tests/*",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.0.0", # For parallel test execution
]

# Ruff settings
[tool.ruff]
lint.ignore = ["F541", "E402"]  # f strings without variables inside. Claude code likes to write multilines all with the f for consistency.
